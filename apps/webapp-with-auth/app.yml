#
# Usage:
# kubectl apply -f app.yml

# Create the deployment for the specified container image
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1-website
  labels:
    app: app1
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app1
      environment: production
  template:
    metadata:
      labels:
        app: app1
        environment: production
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: app1
        image: YOUR_REGISTRY.azurecr.io/YOUR_APP:YOUR_VERSION
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        ports:
        - containerPort: 80
---
# Expose the pods using a cluster ip internal service
apiVersion: v1
kind: Service
metadata:
  name: app1-website
  labels:
    app: app1
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 80
  selector:
    app: app1
---
# Expose the service using the cluster load balancer (ingress-nginx) and with the specified hostname
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app1-website-ingress
  labels:
    app: app1
    environment: production
  annotations:
      # cert-manager should be installed
      cert-manager.io/issuer: "letsencrypt-prod"
      # instruct to redirect not authenticated request to /oauth2 path, that it is configured as another ingress below
      nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
      nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
spec:
  tls:
  - hosts:
    - app1.contoso.com # TODO replace with the actual host
    # Cert-manager will read these annotations and use them to create a certificate, which you can request and see using `kubectl get certificate`
    secretName: app1-website-tls
  rules:
  - host: app1.contoso.com # TODO replace with the actual host
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app1-website
            port: 
              number: 80
  # nginx ingress controller should be installed
  ingressClassName: nginx
---
# Expose azure authentication proxy for path /oauth2 for the same host
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app1-website-auth-ingress
  labels:
    app: app1
    environment: production
  annotations:
      # cert-manager should be installed
      cert-manager.io/issuer: "letsencrypt-prod"
      # increate buffer size to store token generated by Azure AD
      nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
spec:
  tls:
  - hosts:
    - app1.contoso.com # TODO replace with the actual host
    # Cert-manager will read these annotations and use them to create a certificate, which you can request and see using `kubectl get certificate`
    secretName: app1-website-tls
  rules:
  - host: app1.contoso.com # TODO replace with the actual host
    http:
      paths:
      - path: /oauth2
        pathType: Prefix
        backend:
          service:
            name: azuread-oauth2-proxy
            port: 
              number: 80
  # nginx ingress controller should be installed
  ingressClassName: nginx
